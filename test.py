import numpy as np
import math


band = 8000

Lp_all = {
    125:  np.array([26.9, 20.1, 16.4, 15.4, 19.9, 21.5, 14.0, 14.1, 16.8, 17.4]),
    250:  np.array([43.9, 48.5, 43.2, 39.7, 47.5, 39.8, 45.2, 38.1, 45.6, 34.3]),
    500:  np.array([53.2, 51.3, 50.7, 52.4, 51.9, 52.4, 55.2, 50.6, 55.0, 49.6]),
    1000: np.array([57.7, 53.7, 59.4, 57.8, 58.4, 54.6, 56.9, 57.3, 54.2, 53.9]),
    2000: np.array([61.0, 58.0, 64.9, 61.8, 56.6, 63.9, 63.3, 56.6, 62.8, 56.9]),
    4000: np.array([54.0, 53.0, 62.4, 61.4, 58.0, 58.1, 64.6, 62.3, 57.8, 56.1]),
    8000: np.array([57.8, 50.5, 57.6, 60.4, 60.4, 57.4, 54.8, 56.1, 52.3, 54.4])
}
T60_all = {
    125:  (0.82 + 0.93 + 1.39) / 3,   # ≈ 1.05
    250:  (0.58 + 0.57 + 0.69) / 3,   # ≈ 0.613
    500:  (0.56 + 0.62 + 0.51) / 3,   # ≈ 0.563
    1000: (0.55 + 0.54 + 0.49) / 3,   # ≈ 0.527
    2000: (0.49 + 0.48 + 0.50) / 3,   # ≈ 0.49
    4000: (0.40 + 0.42 + 0.42) / 3,   # ≈ 0.413
    8000: (0.35 + 0.30 + 0.29) / 3    # ≈ 0.313
}
Lp_all_source = {
    125:  np.array([61.0, 62.5, 62.0, 59.9, 59.2, 61.2, 59.9, 57.9, 56.1, 53.6]),
    250:  np.array([66.6, 68.3, 70.3, 67.5, 68.8, 67.9, 67.5, 65.2, 63.6, 67.0]),
    500:  np.array([75.5, 72.7, 75.6, 73.7, 70.9, 74.8, 73.0, 70.8, 72.4, 75.2]),
    1000: np.array([78.9, 77.4, 80.0, 79.2, 77.2, 79.0, 81.7, 77.9, 79.6, 80.2]),
    2000: np.array([79.2, 78.2, 75.9, 79.9, 79.0, 81.1, 78.9, 77.7, 78.7, 79.7]),
    4000: np.array([76.0, 77.4, 76.7, 77.0, 78.8, 79.1, 78.1, 74.2, 76.2, 74.4]),
    8000: np.array([73.3, 72.0, 72.5, 72.7, 72.1, 71.0, 69.2, 67.7, 68.8, 67.3])
}
RSS = {
    125:  np.array(80.5),
    250:  np.array(82.4),
    500:  np.array(82.6),
    1000: np.array(87.1),
    2000: np.array(86.9),
    4000: np.array(84.1),
    8000: np.array(80.7)
}

direct = np.array([25.72, 50.65, 59.04, 63.35, 68.20, 66.99, 64.21])
comparison = np.array([80.50, 82.40, 82.60, 87.10, 86.90, 84.10, 80.70])

print(10 * np.log10(np.mean(10**(comparison / 10))))

# Direct
Lp_avg = 10 * np.log10(np.mean(10**(Lp_all[band] / 10)))
V = 3.6 * 9.2 * 6.3
A = 0.16 * V / T60_all[band]
S = 2 * math.pi
K2 = 10 * np.log10(1 + 4 * S / A)
Lp_correct = Lp_avg - K2
power = Lp_correct + 10 * np.log10(S)

# Comparison
Lp_avg_source = 10 * np.log10(np.mean(10**(Lp_all_source[band] / 10)))
Lp_avg_uncorrected = Lp_avg_source + 10 * np.log10(S)
K2_comparison = Lp_avg_uncorrected - RSS[band]
Lp_correct_comparison = Lp_avg_source - K2_comparison
power = Lp_correct_comparison + 10 * np.log10(S)


print(f'{Lp_avg_source}, {Lp_avg_uncorrected}, {K2_comparison}, {Lp_correct_comparison}, {power}')